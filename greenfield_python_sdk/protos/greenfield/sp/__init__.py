# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: greenfield/sp/authz.proto, greenfield/sp/events.proto, greenfield/sp/genesis.proto, greenfield/sp/params.proto, greenfield/sp/query.proto, greenfield/sp/tx.proto, greenfield/sp/types.proto
# plugin: python-betterproto
# This file has been @generated
from dataclasses import dataclass
from typing import TYPE_CHECKING, Dict, List, Optional

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from ...cosmos.base import v1beta1 as __cosmos_base_v1_beta1__
from ...cosmos.base.query import v1beta1 as __cosmos_base_query_v1_beta1__

if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


class Status(betterproto.Enum):
    """Status is the status of a storage provider."""

    STATUS_IN_SERVICE = 0
    STATUS_IN_JAILED = 1
    STATUS_GRACEFUL_EXITING = 2
    STATUS_IN_MAINTENANCE = 3


@dataclass(eq=False, repr=False)
class DepositAuthorization(betterproto.Message):
    """DepositAuthorization defines authorization for sp deposit."""

    max_deposit: "__cosmos_base_v1_beta1__.Coin" = betterproto.message_field(1)
    """
    max_deposit specifies the maximum amount of tokens can be deposit to a storage
    provider. If it is
    empty, there is no spend limit and any amount of coins can be deposit.
    """

    sp_address: str = betterproto.string_field(2)
    """sp_address is the operator address of storage provider."""


@dataclass(eq=False, repr=False)
class Description(betterproto.Message):
    """Description defines a storage provider description."""

    moniker: str = betterproto.string_field(1)
    """moniker defines a human-readable name for the storage provider"""

    identity: str = betterproto.string_field(2)
    """identity defines an optional identity signature (ex. UPort or Keybase)."""

    website: str = betterproto.string_field(3)
    """website defines an optional website link."""

    security_contact: str = betterproto.string_field(4)
    """security_contact defines an optional email for security contact."""

    details: str = betterproto.string_field(5)
    """details define other optional details."""


@dataclass(eq=False, repr=False)
class StorageProvider(betterproto.Message):
    """StorageProvider defines the meta info of storage provider"""

    id: int = betterproto.uint32_field(1)
    """// id is the identifier of the storage provider, used in virtual group"""

    operator_address: str = betterproto.string_field(2)
    """
    operator_address defines the account address of the storage provider's operator; It
    also is the unique index key of sp.
    """

    funding_address: str = betterproto.string_field(3)
    """
    funding_address defines one of the storage provider's accounts which is used to
    deposit and reward.
    """

    seal_address: str = betterproto.string_field(4)
    """
    seal_address defines one of the storage provider's accounts which is used to
    SealObject
    """

    approval_address: str = betterproto.string_field(5)
    """
    approval_address defines one of the storage provider's accounts which is used to
    approve use's createBucket/createObject request
    """

    gc_address: str = betterproto.string_field(6)
    """
    gc_address defines one of the storage provider's accounts which is used for gc
    purpose.
    """

    maintenance_address: str = betterproto.string_field(7)
    """
    maintenance_address defines one of the storage provider's accounts which is used for
    testing while in maintenance mode
    """

    total_deposit: str = betterproto.string_field(8)
    """
    total_deposit defines the number of tokens deposited by this storage provider for
    staking.
    """

    status: "Status" = betterproto.enum_field(9)
    """status defines the current service status of this storage provider"""

    endpoint: str = betterproto.string_field(10)
    """endpoint define the storage provider's network service address"""

    description: "Description" = betterproto.message_field(11)
    """description defines the description terms for the storage provider."""

    bls_key: bytes = betterproto.bytes_field(12)
    """
    bls_key defines the bls pub key of the Storage provider for sealing object and
    completing migration
    """


@dataclass(eq=False, repr=False)
class RewardInfo(betterproto.Message):
    address: str = betterproto.string_field(1)
    amount: "__cosmos_base_v1_beta1__.Coin" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class SpStoragePrice(betterproto.Message):
    """storage price of a specific sp"""

    sp_id: int = betterproto.uint32_field(1)
    """sp id"""

    update_time_sec: int = betterproto.int64_field(2)
    """update time, unix timestamp in seconds"""

    read_price: str = betterproto.string_field(3)
    """read price, in bnb wei per charge byte"""

    free_read_quota: int = betterproto.uint64_field(4)
    """free read quota, in byte"""

    store_price: str = betterproto.string_field(5)
    """store price, in bnb wei per charge byte"""


@dataclass(eq=False, repr=False)
class GlobalSpStorePrice(betterproto.Message):
    """global sp store price, the price for all sps"""

    update_time_sec: int = betterproto.int64_field(1)
    """update time, unix timestamp in seconds"""

    read_price: str = betterproto.string_field(2)
    """read price, in bnb wei per charge byte"""

    primary_store_price: str = betterproto.string_field(3)
    """primary store price, in bnb wei per charge byte"""

    secondary_store_price: str = betterproto.string_field(4)
    """secondary store price, in bnb wei per charge byte"""


@dataclass(eq=False, repr=False)
class SpMaintenanceStats(betterproto.Message):
    records: List["MaintenanceRecord"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class MaintenanceRecord(betterproto.Message):
    """
    MaintenanceRecord is to keep track of every time a sp request to be in Maintenance
    mode
    """

    height: int = betterproto.int64_field(1)
    """block height that request to be in Maintenance mode"""

    request_duration: int = betterproto.int64_field(2)
    """request duration"""

    actual_duration: int = betterproto.int64_field(3)
    """actual duration"""

    request_at: int = betterproto.int64_field(4)
    """request timestamp"""


@dataclass(eq=False, repr=False)
class EventCreateStorageProvider(betterproto.Message):
    """
    EventCreateStorageProvider is emitted when there is a storage provider created
    """

    sp_id: int = betterproto.uint32_field(1)
    """sp_id defines the identifier of storage provider which generated on-chain"""

    sp_address: str = betterproto.string_field(2)
    """sp_address is the operator address of the storage provider"""

    funding_address: str = betterproto.string_field(3)
    """funding_address is the funding account address of the storage provider"""

    seal_address: str = betterproto.string_field(4)
    """seal_address is the account address for SealObject Tx"""

    approval_address: str = betterproto.string_field(5)
    """
    approval_address is the account address for approve create bucket/object signature
    """

    gc_address: str = betterproto.string_field(6)
    """
    gc_address defines one of the storage provider's accounts which is used for gc
    purpose
    """

    maintenance_address: str = betterproto.string_field(7)
    """
    maintenance_address defines one of the storage provider's accounts which is used for
    testing while in maintenance mode
    """

    endpoint: str = betterproto.string_field(8)
    """endpoint is the domain name address used by SP to provide storage services"""

    total_deposit: "__cosmos_base_v1_beta1__.Coin" = betterproto.message_field(9)
    """
    total_deposit is the token coin that the storage provider deposit to the storage
    module
    """

    status: "Status" = betterproto.enum_field(10)
    """status defines the status of the storage provider"""

    description: "Description" = betterproto.message_field(11)
    """description defines the description terms for the storage provider"""

    bls_key: str = betterproto.string_field(12)
    """
    bls_key defines the bls pub key owned by storage provider used when sealing object
    and completing migration
    """


@dataclass(eq=False, repr=False)
class EventEditStorageProvider(betterproto.Message):
    """EventEditStorageProvider is emitted when SP's metadata is edited."""

    sp_id: int = betterproto.uint32_field(1)
    """sp_id defines the identifier of storage provider which generated on-chain"""

    sp_address: str = betterproto.string_field(2)
    """sp_address is the operator address of the storage provider"""

    endpoint: str = betterproto.string_field(3)
    """endpoint is the service endpoint of the storage provider"""

    description: "Description" = betterproto.message_field(4)
    """description defines the description terms for the storage provider"""

    seal_address: str = betterproto.string_field(5)
    """seal_address is the account address for SealObject Tx"""

    approval_address: str = betterproto.string_field(6)
    """
    approval_address is the account address for approve create bucket/object signature
    """

    gc_address: str = betterproto.string_field(7)
    """
    gc_address defines one of the storage provider's accounts which is used for gc
    purpose
    """

    maintenance_address: str = betterproto.string_field(8)
    """
    maintenance_address defines one of the storage provider's accounts which is used for
    testing while in maintenance mode
    """

    bls_key: str = betterproto.string_field(9)
    """
    bls_key defines the bls pub key owned by storage provider used when sealing object
    """


@dataclass(eq=False, repr=False)
class EventDeposit(betterproto.Message):
    """EventDeposit is emitted when sp deposit tokens."""

    funding_address: str = betterproto.string_field(1)
    """funding_address is the funding account address of the storage provider"""

    deposit: str = betterproto.string_field(2)
    """deposit is the token coin deposited this message"""

    total_deposit: str = betterproto.string_field(3)
    """total_deposit is the total token coins this storage provider deposited"""


@dataclass(eq=False, repr=False)
class EventSpStoragePriceUpdate(betterproto.Message):
    sp_id: int = betterproto.uint32_field(1)
    """sp id"""

    update_time_sec: int = betterproto.int64_field(2)
    """update time, in unix timestamp"""

    read_price: str = betterproto.string_field(3)
    """read price, in bnb wei per charge byte"""

    free_read_quota: int = betterproto.uint64_field(4)
    """free read quota, in byte"""

    store_price: str = betterproto.string_field(5)
    """store price, in bnb wei per charge byte"""


@dataclass(eq=False, repr=False)
class EventGlobalSpStorePriceUpdate(betterproto.Message):
    update_time_sec: int = betterproto.int64_field(1)
    """update time, in unix timestamp"""

    read_price: str = betterproto.string_field(2)
    """read price, in bnb wei per charge byte"""

    primary_store_price: str = betterproto.string_field(3)
    """primary store price, in bnb wei per charge byte"""

    secondary_store_price: str = betterproto.string_field(4)
    """secondary store price, in bnb wei per charge byte"""


@dataclass(eq=False, repr=False)
class EventUpdateStorageProviderStatus(betterproto.Message):
    """
    EventUpdateStorageProviderStatus is emitted when the SP update its status
    successfully
    """

    sp_id: int = betterproto.uint32_field(1)
    """sp_id defines the identifier of storage provider which generated on-chain"""

    sp_address: str = betterproto.string_field(2)
    """sp_address is the operator address of the storage provider"""

    pre_status: str = betterproto.string_field(3)
    """pre status"""

    new_status: str = betterproto.string_field(4)
    """new status"""


@dataclass(eq=False, repr=False)
class Params(betterproto.Message):
    """Params defines the parameters for the module."""

    deposit_denom: str = betterproto.string_field(1)
    """deposit_denom defines the staking coin denomination."""

    min_deposit: str = betterproto.string_field(2)
    """min_deposit defines the minimum deposit amount for storage providers."""

    secondary_sp_store_price_ratio: str = betterproto.string_field(3)
    """
    the ratio of the store price of the secondary sp to the primary sp, the default
    value is 80%
    """

    num_of_historical_blocks_for_maintenance_records: int = betterproto.int64_field(4)
    """previous blocks that be traced back to for maintenance_records"""

    maintenance_duration_quota: int = betterproto.int64_field(5)
    """
    the max duration that a SP can be in_maintenance within
    num_of_historical_blocks_for_maintenance_records
    """

    num_of_lockup_blocks_for_maintenance: int = betterproto.int64_field(6)
    """
    the number of blocks to be wait for sp to be in maintenance mode again if already
    requested
    """

    update_global_price_interval: int = betterproto.uint64_field(7)
    """
    the time interval to update global storage price, if it is not set then the price
    will be updated at the first block of each natural month
    """

    update_price_disallowed_days: int = betterproto.uint32_field(8)
    """
    the days counting backwards from end of a month in which a sp cannot update its
    price
    """


@dataclass(eq=False, repr=False)
class GenesisState(betterproto.Message):
    """GenesisState defines the sp module's genesis state."""

    params: "Params" = betterproto.message_field(1)
    storage_providers: List["StorageProvider"] = betterproto.message_field(2)
    """this used by starport scaffolding # genesis/proto/state"""

    sp_storage_price_list: List["SpStoragePrice"] = betterproto.message_field(3)


@dataclass(eq=False, repr=False)
class QueryParamsRequest(betterproto.Message):
    """QueryParamsRequest is request type for the Query/Params RPC method."""

    pass


@dataclass(eq=False, repr=False)
class QueryParamsResponse(betterproto.Message):
    """QueryParamsResponse is response type for the Query/Params RPC method."""

    params: "Params" = betterproto.message_field(1)
    """params holds all the parameters of this module."""


@dataclass(eq=False, repr=False)
class QueryStorageProvidersRequest(betterproto.Message):
    """this line is used by starport scaffolding # 3"""

    pagination: "__cosmos_base_query_v1_beta1__.PageRequest" = betterproto.message_field(1)
    """pagination defines an optional pagination for the request."""


@dataclass(eq=False, repr=False)
class QueryStorageProvidersResponse(betterproto.Message):
    sps: List["StorageProvider"] = betterproto.message_field(1)
    pagination: "__cosmos_base_query_v1_beta1__.PageResponse" = betterproto.message_field(2)
    """pagination defines the pagination in the response."""


@dataclass(eq=False, repr=False)
class QuerySpStoragePriceRequest(betterproto.Message):
    sp_addr: str = betterproto.string_field(1)
    """operator address of sp"""


@dataclass(eq=False, repr=False)
class QuerySpStoragePriceResponse(betterproto.Message):
    sp_storage_price: "SpStoragePrice" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryGlobalSpStorePriceByTimeRequest(betterproto.Message):
    timestamp: int = betterproto.int64_field(1)
    """unix timestamp in seconds. If it's 0, it will return the latest price."""


@dataclass(eq=False, repr=False)
class QueryGlobalSpStorePriceByTimeResponse(betterproto.Message):
    global_sp_store_price: "GlobalSpStorePrice" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryStorageProviderRequest(betterproto.Message):
    id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class QueryStorageProviderResponse(betterproto.Message):
    storage_provider: "StorageProvider" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryStorageProviderByOperatorAddressRequest(betterproto.Message):
    operator_address: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class QueryStorageProviderByOperatorAddressResponse(betterproto.Message):
    storage_provider: "StorageProvider" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryStorageProviderMaintenanceRecordsRequest(betterproto.Message):
    operator_address: str = betterproto.string_field(1)


@dataclass(eq=False, repr=False)
class QueryStorageProviderMaintenanceRecordsResponse(betterproto.Message):
    records: List["MaintenanceRecord"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class MsgCreateStorageProvider(betterproto.Message):
    """MsgCreateStorageProvider defines message for creating a new storage provider."""

    creator: str = betterproto.string_field(1)
    """creator is the msg signer"""

    description: "Description" = betterproto.message_field(2)
    """description defines the description terms for the storage provider."""

    sp_address: str = betterproto.string_field(3)
    """
    sp_address defines the address of the sp's operator; It also is the unqiue index key
    of sp.
    """

    funding_address: str = betterproto.string_field(4)
    """
    fund_address is the account address of the storage provider for deposit,
    remuneration.
    """

    seal_address: str = betterproto.string_field(5)
    """seal_address is the account address of the storage provider for sealObject"""

    approval_address: str = betterproto.string_field(6)
    """
    approval_address is the account address of the storage provider for ack
    CreateBucket/Object.
    """

    gc_address: str = betterproto.string_field(7)
    """
    gc_address defines one of the storage provider's accounts which is used for gc
    purpose.
    """

    maintenance_address: str = betterproto.string_field(8)
    """
    maintenance_address defines one of the storage provider's accounts which is used for
    testing while in maintenance mode
    """

    endpoint: str = betterproto.string_field(9)
    """endpoint is the service address of the storage provider"""

    deposit: "__cosmos_base_v1_beta1__.Coin" = betterproto.message_field(10)
    """deposit define the deposit token"""

    read_price: str = betterproto.string_field(11)
    """read price, in bnb wei per charge byte"""

    free_read_quota: int = betterproto.uint64_field(12)
    """free read quota, in byte"""

    store_price: str = betterproto.string_field(13)
    """store price, in bnb wei per charge byte"""

    bls_key: str = betterproto.string_field(14)
    """bls_key defines the bls pub key of the Storage provider for sealing object"""

    bls_proof: str = betterproto.string_field(15)


@dataclass(eq=False, repr=False)
class MsgCreateStorageProviderResponse(betterproto.Message):
    """
    MsgCreateStorageProviderResponse defines the Msg/CreateStorageProvider response
    type.
    """

    pass


@dataclass(eq=False, repr=False)
class MsgDeposit(betterproto.Message):
    """MsgDeposit defines a SDK message for deposit token for sp."""

    creator: str = betterproto.string_field(1)
    """creator is the msg signer, it should be sp's fund address"""

    sp_address: str = betterproto.string_field(2)
    """sp_address is the operator address of sp"""

    deposit: "__cosmos_base_v1_beta1__.Coin" = betterproto.message_field(3)
    """deposit is a mount of token which used to deposit for SP"""


@dataclass(eq=False, repr=False)
class MsgDepositResponse(betterproto.Message):
    """MsgDepositResponse defines the Msg/Deposit response type."""

    pass


@dataclass(eq=False, repr=False)
class MsgEditStorageProvider(betterproto.Message):
    """
    MsgEditStorageProvider defines a SDK message for editing an existing sp.
    TODO: use sp id to edit the storage provider.
    """

    sp_address: str = betterproto.string_field(1)
    endpoint: str = betterproto.string_field(2)
    description: "Description" = betterproto.message_field(3)
    seal_address: str = betterproto.string_field(4)
    """seal_address is the account address of the storage provider for sealObject"""

    approval_address: str = betterproto.string_field(5)
    """
    approval_address is the account address of the storage provider for ack
    CreateBucket/Object
    """

    gc_address: str = betterproto.string_field(6)
    """
    gc_address defines one of the storage provider's accounts which is used for gc
    purpose
    """

    maintenance_address: str = betterproto.string_field(7)
    """
    maintenance_address defines one of the storage provider's accounts which is used for
    testing while in maintenance mode
    """

    bls_key: str = betterproto.string_field(8)
    """bls_key defines the bls pub key of the Storage provider for sealing object"""

    bls_proof: str = betterproto.string_field(9)


@dataclass(eq=False, repr=False)
class MsgEditStorageProviderResponse(betterproto.Message):
    """
    MsgEditStorageProviderResponse defines the Msg/EditStorageProvider response type.
    """

    pass


@dataclass(eq=False, repr=False)
class MsgUpdateSpStoragePrice(betterproto.Message):
    sp_address: str = betterproto.string_field(1)
    """sp address"""

    read_price: str = betterproto.string_field(2)
    """read price, in bnb wei per charge byte"""

    free_read_quota: int = betterproto.uint64_field(3)
    """free read quota, in byte"""

    store_price: str = betterproto.string_field(4)
    """store price, in bnb wei per charge byte"""


@dataclass(eq=False, repr=False)
class MsgUpdateSpStoragePriceResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgUpdateParams(betterproto.Message):
    """MsgUpdateParams is the Msg/UpdateParams request type."""

    authority: str = betterproto.string_field(1)
    """
    authority is the address that controls the module (defaults to x/gov unless
    overwritten).
    """

    params: "Params" = betterproto.message_field(2)
    """
    params defines the x/sp parameters to update.
    NOTE: All parameters must be supplied.
    """


@dataclass(eq=False, repr=False)
class MsgUpdateParamsResponse(betterproto.Message):
    """
    MsgUpdateParamsResponse defines the response structure for executing a
    MsgUpdateParams message.
    """

    pass


@dataclass(eq=False, repr=False)
class MsgUpdateStorageProviderStatus(betterproto.Message):
    """MsgUpdateStorageProviderStatus is used to update the status of a SP by itself"""

    sp_address: str = betterproto.string_field(1)
    """sp_address defines the operator address"""

    status: "Status" = betterproto.enum_field(2)
    """status defines the desired status be update to."""

    duration: int = betterproto.int64_field(3)
    """duration defines the time requested in desired status"""


@dataclass(eq=False, repr=False)
class MsgUpdateStorageProviderStatusResponse(betterproto.Message):
    """
    MsgUpdateStorageProviderStatusResponse defines the MsgUpdateStorageProviderStatus
    response type.
    """

    pass


class QueryStub(betterproto.ServiceStub):
    async def params(
        self,
        query_params_request: "QueryParamsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryParamsResponse":
        return await self._unary_unary(
            "/greenfield.sp.Query/Params",
            query_params_request,
            QueryParamsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def storage_providers(
        self,
        query_storage_providers_request: "QueryStorageProvidersRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryStorageProvidersResponse":
        return await self._unary_unary(
            "/greenfield.sp.Query/StorageProviders",
            query_storage_providers_request,
            QueryStorageProvidersResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_sp_storage_price(
        self,
        query_sp_storage_price_request: "QuerySpStoragePriceRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QuerySpStoragePriceResponse":
        return await self._unary_unary(
            "/greenfield.sp.Query/QuerySpStoragePrice",
            query_sp_storage_price_request,
            QuerySpStoragePriceResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def query_global_sp_store_price_by_time(
        self,
        query_global_sp_store_price_by_time_request: "QueryGlobalSpStorePriceByTimeRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryGlobalSpStorePriceByTimeResponse":
        return await self._unary_unary(
            "/greenfield.sp.Query/QueryGlobalSpStorePriceByTime",
            query_global_sp_store_price_by_time_request,
            QueryGlobalSpStorePriceByTimeResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def storage_provider(
        self,
        query_storage_provider_request: "QueryStorageProviderRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryStorageProviderResponse":
        return await self._unary_unary(
            "/greenfield.sp.Query/StorageProvider",
            query_storage_provider_request,
            QueryStorageProviderResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def storage_provider_by_operator_address(
        self,
        query_storage_provider_by_operator_address_request: "QueryStorageProviderByOperatorAddressRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryStorageProviderByOperatorAddressResponse":
        return await self._unary_unary(
            "/greenfield.sp.Query/StorageProviderByOperatorAddress",
            query_storage_provider_by_operator_address_request,
            QueryStorageProviderByOperatorAddressResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def storage_provider_maintenance_records_by_operator_address(
        self,
        query_storage_provider_maintenance_records_request: "QueryStorageProviderMaintenanceRecordsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryStorageProviderMaintenanceRecordsResponse":
        return await self._unary_unary(
            "/greenfield.sp.Query/StorageProviderMaintenanceRecordsByOperatorAddress",
            query_storage_provider_maintenance_records_request,
            QueryStorageProviderMaintenanceRecordsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class MsgStub(betterproto.ServiceStub):
    async def create_storage_provider(
        self,
        msg_create_storage_provider: "MsgCreateStorageProvider",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgCreateStorageProviderResponse":
        return await self._unary_unary(
            "/greenfield.sp.Msg/CreateStorageProvider",
            msg_create_storage_provider,
            MsgCreateStorageProviderResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def deposit(
        self,
        msg_deposit: "MsgDeposit",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgDepositResponse":
        return await self._unary_unary(
            "/greenfield.sp.Msg/Deposit",
            msg_deposit,
            MsgDepositResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def edit_storage_provider(
        self,
        msg_edit_storage_provider: "MsgEditStorageProvider",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgEditStorageProviderResponse":
        return await self._unary_unary(
            "/greenfield.sp.Msg/EditStorageProvider",
            msg_edit_storage_provider,
            MsgEditStorageProviderResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update_sp_storage_price(
        self,
        msg_update_sp_storage_price: "MsgUpdateSpStoragePrice",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgUpdateSpStoragePriceResponse":
        return await self._unary_unary(
            "/greenfield.sp.Msg/UpdateSpStoragePrice",
            msg_update_sp_storage_price,
            MsgUpdateSpStoragePriceResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update_sp_status(
        self,
        msg_update_storage_provider_status: "MsgUpdateStorageProviderStatus",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgUpdateStorageProviderStatusResponse":
        return await self._unary_unary(
            "/greenfield.sp.Msg/UpdateSpStatus",
            msg_update_storage_provider_status,
            MsgUpdateStorageProviderStatusResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update_params(
        self,
        msg_update_params: "MsgUpdateParams",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgUpdateParamsResponse":
        return await self._unary_unary(
            "/greenfield.sp.Msg/UpdateParams",
            msg_update_params,
            MsgUpdateParamsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class QueryBase(ServiceBase):
    async def params(self, query_params_request: "QueryParamsRequest") -> "QueryParamsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def storage_providers(
        self, query_storage_providers_request: "QueryStorageProvidersRequest"
    ) -> "QueryStorageProvidersResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_sp_storage_price(
        self, query_sp_storage_price_request: "QuerySpStoragePriceRequest"
    ) -> "QuerySpStoragePriceResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def query_global_sp_store_price_by_time(
        self,
        query_global_sp_store_price_by_time_request: "QueryGlobalSpStorePriceByTimeRequest",
    ) -> "QueryGlobalSpStorePriceByTimeResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def storage_provider(
        self, query_storage_provider_request: "QueryStorageProviderRequest"
    ) -> "QueryStorageProviderResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def storage_provider_by_operator_address(
        self,
        query_storage_provider_by_operator_address_request: "QueryStorageProviderByOperatorAddressRequest",
    ) -> "QueryStorageProviderByOperatorAddressResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def storage_provider_maintenance_records_by_operator_address(
        self,
        query_storage_provider_maintenance_records_request: "QueryStorageProviderMaintenanceRecordsRequest",
    ) -> "QueryStorageProviderMaintenanceRecordsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_params(self, stream: "grpclib.server.Stream[QueryParamsRequest, QueryParamsResponse]") -> None:
        request = await stream.recv_message()
        response = await self.params(request)
        await stream.send_message(response)

    async def __rpc_storage_providers(
        self,
        stream: "grpclib.server.Stream[QueryStorageProvidersRequest, QueryStorageProvidersResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.storage_providers(request)
        await stream.send_message(response)

    async def __rpc_query_sp_storage_price(
        self,
        stream: "grpclib.server.Stream[QuerySpStoragePriceRequest, QuerySpStoragePriceResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_sp_storage_price(request)
        await stream.send_message(response)

    async def __rpc_query_global_sp_store_price_by_time(
        self,
        stream: "grpclib.server.Stream[QueryGlobalSpStorePriceByTimeRequest, QueryGlobalSpStorePriceByTimeResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.query_global_sp_store_price_by_time(request)
        await stream.send_message(response)

    async def __rpc_storage_provider(
        self,
        stream: "grpclib.server.Stream[QueryStorageProviderRequest, QueryStorageProviderResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.storage_provider(request)
        await stream.send_message(response)

    async def __rpc_storage_provider_by_operator_address(
        self,
        stream: "grpclib.server.Stream[QueryStorageProviderByOperatorAddressRequest, QueryStorageProviderByOperatorAddressResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.storage_provider_by_operator_address(request)
        await stream.send_message(response)

    async def __rpc_storage_provider_maintenance_records_by_operator_address(
        self,
        stream: "grpclib.server.Stream[QueryStorageProviderMaintenanceRecordsRequest, QueryStorageProviderMaintenanceRecordsResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.storage_provider_maintenance_records_by_operator_address(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/greenfield.sp.Query/Params": grpclib.const.Handler(
                self.__rpc_params,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryParamsRequest,
                QueryParamsResponse,
            ),
            "/greenfield.sp.Query/StorageProviders": grpclib.const.Handler(
                self.__rpc_storage_providers,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryStorageProvidersRequest,
                QueryStorageProvidersResponse,
            ),
            "/greenfield.sp.Query/QuerySpStoragePrice": grpclib.const.Handler(
                self.__rpc_query_sp_storage_price,
                grpclib.const.Cardinality.UNARY_UNARY,
                QuerySpStoragePriceRequest,
                QuerySpStoragePriceResponse,
            ),
            "/greenfield.sp.Query/QueryGlobalSpStorePriceByTime": grpclib.const.Handler(
                self.__rpc_query_global_sp_store_price_by_time,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryGlobalSpStorePriceByTimeRequest,
                QueryGlobalSpStorePriceByTimeResponse,
            ),
            "/greenfield.sp.Query/StorageProvider": grpclib.const.Handler(
                self.__rpc_storage_provider,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryStorageProviderRequest,
                QueryStorageProviderResponse,
            ),
            "/greenfield.sp.Query/StorageProviderByOperatorAddress": grpclib.const.Handler(
                self.__rpc_storage_provider_by_operator_address,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryStorageProviderByOperatorAddressRequest,
                QueryStorageProviderByOperatorAddressResponse,
            ),
            "/greenfield.sp.Query/StorageProviderMaintenanceRecordsByOperatorAddress": grpclib.const.Handler(
                self.__rpc_storage_provider_maintenance_records_by_operator_address,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryStorageProviderMaintenanceRecordsRequest,
                QueryStorageProviderMaintenanceRecordsResponse,
            ),
        }


class MsgBase(ServiceBase):
    async def create_storage_provider(
        self, msg_create_storage_provider: "MsgCreateStorageProvider"
    ) -> "MsgCreateStorageProviderResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def deposit(self, msg_deposit: "MsgDeposit") -> "MsgDepositResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def edit_storage_provider(
        self, msg_edit_storage_provider: "MsgEditStorageProvider"
    ) -> "MsgEditStorageProviderResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update_sp_storage_price(
        self, msg_update_sp_storage_price: "MsgUpdateSpStoragePrice"
    ) -> "MsgUpdateSpStoragePriceResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update_sp_status(
        self, msg_update_storage_provider_status: "MsgUpdateStorageProviderStatus"
    ) -> "MsgUpdateStorageProviderStatusResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update_params(self, msg_update_params: "MsgUpdateParams") -> "MsgUpdateParamsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_create_storage_provider(
        self,
        stream: "grpclib.server.Stream[MsgCreateStorageProvider, MsgCreateStorageProviderResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_storage_provider(request)
        await stream.send_message(response)

    async def __rpc_deposit(self, stream: "grpclib.server.Stream[MsgDeposit, MsgDepositResponse]") -> None:
        request = await stream.recv_message()
        response = await self.deposit(request)
        await stream.send_message(response)

    async def __rpc_edit_storage_provider(
        self,
        stream: "grpclib.server.Stream[MsgEditStorageProvider, MsgEditStorageProviderResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.edit_storage_provider(request)
        await stream.send_message(response)

    async def __rpc_update_sp_storage_price(
        self,
        stream: "grpclib.server.Stream[MsgUpdateSpStoragePrice, MsgUpdateSpStoragePriceResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.update_sp_storage_price(request)
        await stream.send_message(response)

    async def __rpc_update_sp_status(
        self,
        stream: "grpclib.server.Stream[MsgUpdateStorageProviderStatus, MsgUpdateStorageProviderStatusResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.update_sp_status(request)
        await stream.send_message(response)

    async def __rpc_update_params(
        self, stream: "grpclib.server.Stream[MsgUpdateParams, MsgUpdateParamsResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.update_params(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/greenfield.sp.Msg/CreateStorageProvider": grpclib.const.Handler(
                self.__rpc_create_storage_provider,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgCreateStorageProvider,
                MsgCreateStorageProviderResponse,
            ),
            "/greenfield.sp.Msg/Deposit": grpclib.const.Handler(
                self.__rpc_deposit,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgDeposit,
                MsgDepositResponse,
            ),
            "/greenfield.sp.Msg/EditStorageProvider": grpclib.const.Handler(
                self.__rpc_edit_storage_provider,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgEditStorageProvider,
                MsgEditStorageProviderResponse,
            ),
            "/greenfield.sp.Msg/UpdateSpStoragePrice": grpclib.const.Handler(
                self.__rpc_update_sp_storage_price,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgUpdateSpStoragePrice,
                MsgUpdateSpStoragePriceResponse,
            ),
            "/greenfield.sp.Msg/UpdateSpStatus": grpclib.const.Handler(
                self.__rpc_update_sp_status,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgUpdateStorageProviderStatus,
                MsgUpdateStorageProviderStatusResponse,
            ),
            "/greenfield.sp.Msg/UpdateParams": grpclib.const.Handler(
                self.__rpc_update_params,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgUpdateParams,
                MsgUpdateParamsResponse,
            ),
        }
