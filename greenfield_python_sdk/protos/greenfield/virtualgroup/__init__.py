# Generated by the protocol buffer compiler.  DO NOT EDIT!
# sources: greenfield/virtualgroup/events.proto, greenfield/virtualgroup/genesis.proto, greenfield/virtualgroup/params.proto, greenfield/virtualgroup/query.proto, greenfield/virtualgroup/tx.proto, greenfield/virtualgroup/types.proto
# plugin: python-betterproto
# This file has been @generated
from dataclasses import dataclass
from typing import TYPE_CHECKING, Dict, List, Optional

import betterproto
import grpclib
from betterproto.grpc.grpclib_server import ServiceBase

from ...cosmos.base import v1beta1 as __cosmos_base_v1_beta1__
from ...cosmos.base.query import v1beta1 as __cosmos_base_query_v1_beta1__
from .. import common as _common__

if TYPE_CHECKING:
    import grpclib.server
    from betterproto.grpc.grpclib_client import MetadataLike
    from grpclib.metadata import Deadline


@dataclass(eq=False, repr=False)
class GlobalVirtualGroup(betterproto.Message):
    """
    A global virtual group consists of one primary SP (SP) and multiple secondary SP.
    Every global virtual group must belong to a GVG family, and the objects of each
    bucket must be stored in a GVG within a group family.
    """

    id: int = betterproto.uint32_field(1)
    """ID represents the unique identifier of the global virtual group."""

    family_id: int = betterproto.uint32_field(2)
    """
    Family ID represents the identifier of the GVG family that the group belongs to.
    """

    primary_sp_id: int = betterproto.uint32_field(3)
    """
    Primary SP ID represents the unique identifier of the primary storage provider in
    the group.
    """

    secondary_sp_ids: List[int] = betterproto.uint32_field(4)
    """
    Secondary SP IDs represents the list of unique identifiers of the secondary storage
    providers in the group.
    """

    stored_size: int = betterproto.uint64_field(5)
    """Stored size represents the size of the stored objects within the group."""

    virtual_payment_address: str = betterproto.string_field(6)
    """
    Virtual payment address represents the payment address associated with the group.
    """

    total_deposit: str = betterproto.string_field(7)
    """
    Total deposit represents the number of tokens deposited by this storage provider for
    staking.
    """


@dataclass(eq=False, repr=False)
class GlobalVirtualGroupFamily(betterproto.Message):
    """
    Global virtual group family serve as a means of grouping global virtual groups.
    Each bucket must be associated with a unique global virtual group family and cannot
    cross families.
    """

    id: int = betterproto.uint32_field(1)
    """id is the identifier of the global virtual group family."""

    primary_sp_id: int = betterproto.uint32_field(2)
    """primary_sp_id"""

    global_virtual_group_ids: List[int] = betterproto.uint32_field(3)
    """
    global_virtual_group_ids is a list of identifiers of the global virtual groups
    associated with the family.
    """

    virtual_payment_address: str = betterproto.string_field(4)
    """
    virtual_payment_address is the payment address associated with the global virtual
    group family.
    """


@dataclass(eq=False, repr=False)
class GlobalVirtualGroupsBindingOnBucket(betterproto.Message):
    bucket_id: str = betterproto.string_field(1)
    """bucket_id is the unique identification for the bucket."""

    global_virtual_group_ids: List[int] = betterproto.uint32_field(2)
    """
    global_virtual_group_ids is a list of identifiers of the global virtual groups
    associated with the bucket.
    """

    local_virtual_group_ids: List[int] = betterproto.uint32_field(3)
    """
    local_virtual_group_ids is a list of identifiers of the local virtual groups
    associated with the bucket.
    """


@dataclass(eq=False, repr=False)
class GvgStatisticsWithinSp(betterproto.Message):
    storage_provider_id: int = betterproto.uint32_field(1)
    """
    storage_provider_id defines the id of the sp which the statistics associated to
    """

    primary_count: int = betterproto.uint32_field(2)
    """
    primary_sp_family_count defines the number of the family which this sp serves as
    primary sp
    """

    secondary_count: int = betterproto.uint32_field(3)
    """
    secondary_count defines the number of global virtual groups (GVGs) in
    which this storage provider serves as a secondary storage provider.
    """


@dataclass(eq=False, repr=False)
class SwapOutInfo(betterproto.Message):
    sp_id: int = betterproto.uint32_field(1)
    """sp_id is the unique id of the storage provider who want to swap out."""

    successor_sp_id: int = betterproto.uint32_field(2)
    """successor_sp_id is the id of the successor storage provider."""


@dataclass(eq=False, repr=False)
class EventCreateGlobalVirtualGroup(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    """The unique id of global virtual group, which is generated by blockchain"""

    family_id: int = betterproto.uint32_field(2)
    """The id of the global virtual group family where the gvg belongs"""

    primary_sp_id: int = betterproto.uint32_field(3)
    """The id of the primary sp who create this global virtual group"""

    secondary_sp_ids: List[int] = betterproto.uint32_field(4)
    """The ids of the secondary sps which belongs to this global virtual group"""

    stored_size: int = betterproto.uint64_field(5)
    """The store size of all the objects stores in this global virtual group"""

    virtual_payment_address: str = betterproto.string_field(6)
    """
    The virtual payment address of this global virtual group, which is auto generated by
    blockchain
    And, all users' payment flows will flow to this account
    """

    total_deposit: str = betterproto.string_field(7)
    """The total amount of the staking for this global virtual group"""


@dataclass(eq=False, repr=False)
class EventUpdateGlobalVirtualGroup(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    """The id of global virtual group, which has been updated"""

    store_size: int = betterproto.uint64_field(2)
    """The store size of all the objects stores in this global virtual group"""

    total_deposit: str = betterproto.string_field(3)
    """The total amount of the staking for this global virtual group"""

    primary_sp_id: int = betterproto.uint32_field(4)
    """
    Primary SP ID represents the unique id of the primary storage provider in the group.
    """

    secondary_sp_ids: List[int] = betterproto.uint32_field(5)
    """
    Secondary SP IDs represents the list of unique identifiers of the secondary storage
    providers in the group.
    """


@dataclass(eq=False, repr=False)
class EventDeleteGlobalVirtualGroup(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    """The id of global virtual group, which has been deleted"""

    primary_sp_id: int = betterproto.uint32_field(2)
    """The id of the primary sp who create this global virtual group family"""


@dataclass(eq=False, repr=False)
class EventCreateGlobalVirtualGroupFamily(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    """The id of global virtual group family, which is auto generated by blockchain"""

    primary_sp_id: int = betterproto.uint32_field(2)
    """The id of the primary sp who create this global virtual group family"""

    virtual_payment_address: str = betterproto.string_field(3)
    """
    The virtual payment address of this global virtual group family, which is auto
    generated by blockcahin
    all users' read quota payment flows will flow to this account.
    """

    global_virtual_group_ids: List[int] = betterproto.uint32_field(4)
    """global_virtual_group_ids are the ids of gvgs in this family"""


@dataclass(eq=False, repr=False)
class EventUpdateGlobalVirtualGroupFamily(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    """The id of global virtual group family, which is auto generated by blockchain"""

    primary_sp_id: int = betterproto.uint32_field(2)
    """The id of the primary sp who create this global virtual group family"""

    global_virtual_group_ids: List[int] = betterproto.uint32_field(3)
    """global_virtual_group_ids are the ids of gvgs in this family"""


@dataclass(eq=False, repr=False)
class EventDeleteGlobalVirtualGroupFamily(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    """The id of global virtual group family, which is auto generated by blockchain"""

    primary_sp_id: int = betterproto.uint32_field(2)
    """The id of the primary sp who create this global virtual group family"""


@dataclass(eq=False, repr=False)
class EventCreateLocalVirtualGroup(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    """
    The id of the local virtual group and this ID is unique within the bucket
    and different buckets will have the same ID
    """

    bucket_id: str = betterproto.string_field(2)
    """The id of the bucket"""

    global_virtual_group_id: int = betterproto.uint32_field(3)
    """The id of the global virtual group"""

    stored_size: int = betterproto.uint64_field(4)
    """The stored size of all the objects stores in this lvg"""


@dataclass(eq=False, repr=False)
class EventUpdateLocalVirtualGroup(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    """The id of the local virtual group"""

    bucket_id: str = betterproto.string_field(2)
    """The id of the bucket"""

    global_virtual_group_id: int = betterproto.uint32_field(3)
    """The global_virtual_group_id is gvgid of lvg after migrate"""

    stored_size: int = betterproto.uint64_field(4)
    """The stored size of all the objects stores in this lvg"""


@dataclass(eq=False, repr=False)
class EventDeleteLocalVirtualGroup(betterproto.Message):
    id: int = betterproto.uint32_field(1)
    """The id of the local virtual group"""

    bucket_id: str = betterproto.string_field(2)
    """The id of the bucket"""


@dataclass(eq=False, repr=False)
class EventSwapOut(betterproto.Message):
    storage_provider_id: int = betterproto.uint32_field(1)
    """The id of the storage provider who wants to swap out"""

    global_virtual_group_family_id: int = betterproto.uint32_field(2)
    """
    The id of the gvg family which the storage provider wants to swap out as primary sp
    """

    global_virtual_group_ids: List[int] = betterproto.uint32_field(3)
    """
    The ids of the gvgs which the storage provider wants to swap out as secondary sp
    """

    successor_sp_id: int = betterproto.uint32_field(4)
    """The id of the successor sp who take over this family or these gvgs"""


@dataclass(eq=False, repr=False)
class EventCompleteSwapOut(betterproto.Message):
    storage_provider_id: int = betterproto.uint32_field(1)
    """The id of the storage provider who complete swap out."""

    src_storage_provider_id: int = betterproto.uint32_field(2)
    """The id of the storage provider who swap out the family or gvgs"""

    global_virtual_group_family_id: int = betterproto.uint32_field(3)
    """The id of the gvg family"""

    global_virtual_group_ids: List[int] = betterproto.uint32_field(4)
    """The ids of the gvgs"""


@dataclass(eq=False, repr=False)
class EventCancelSwapOut(betterproto.Message):
    storage_provider_id: int = betterproto.uint32_field(1)
    """The id of the storage provider who cancel swap out."""

    global_virtual_group_family_id: int = betterproto.uint32_field(2)
    """The id of the gvg family"""

    global_virtual_group_ids: List[int] = betterproto.uint32_field(3)
    """The ids of the gvgs"""

    successor_sp_id: int = betterproto.uint32_field(4)
    """The id of the successor sp who take over this family or these gvgs"""


@dataclass(eq=False, repr=False)
class EventStorageProviderExit(betterproto.Message):
    storage_provider_id: int = betterproto.uint32_field(1)
    """The id of the storage provider who wants to exit"""

    operator_address: str = betterproto.string_field(2)
    """The operator address of the storage provider who wants to exit"""


@dataclass(eq=False, repr=False)
class EventCompleteStorageProviderExit(betterproto.Message):
    storage_provider_id: int = betterproto.uint32_field(1)
    """The id of the storage provider who complete exit"""

    operator_address: str = betterproto.string_field(2)
    """The operator address which initial the complete exit transaction"""

    total_deposit: str = betterproto.string_field(3)
    """
    total_deposit defines the number of tokens deposited by this storage provider for
    staking.
    """


@dataclass(eq=False, repr=False)
class Params(betterproto.Message):
    """Params defines the parameters for the module."""

    deposit_denom: str = betterproto.string_field(1)
    """deposit_denom defines the staking coin denomination."""

    gvg_staking_per_bytes: str = betterproto.string_field(2)
    """store price, in bnb wei per charge byte"""

    max_local_virtual_group_num_per_bucket: int = betterproto.uint32_field(3)
    """the max number of lvg which allowed in a bucket"""

    max_global_virtual_group_num_per_family: int = betterproto.uint32_field(4)
    """the max number of gvg which can exist in a family"""

    max_store_size_per_family: int = betterproto.uint64_field(5)
    """
    if the store size reach the exceed, the family is not allowed to sever more buckets
    """


@dataclass(eq=False, repr=False)
class GenesisState(betterproto.Message):
    """
    GenesisState defines the virtualgroup module's genesis state.
    GenesisState defines the raw genesis transaction in JSON.
    """

    params: "Params" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryParamsRequest(betterproto.Message):
    """QueryParamsRequest is request type for the Query/Params RPC method."""

    pass


@dataclass(eq=False, repr=False)
class QueryParamsResponse(betterproto.Message):
    """QueryParamsResponse is response type for the Query/Params RPC method."""

    params: "Params" = betterproto.message_field(1)
    """params holds all the parameters of this module."""


@dataclass(eq=False, repr=False)
class QueryGlobalVirtualGroupRequest(betterproto.Message):
    global_virtual_group_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class QueryGlobalVirtualGroupResponse(betterproto.Message):
    global_virtual_group: "GlobalVirtualGroup" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryGlobalVirtualGroupByFamilyIdRequest(betterproto.Message):
    global_virtual_group_family_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class QueryGlobalVirtualGroupByFamilyIdResponse(betterproto.Message):
    global_virtual_groups: List["GlobalVirtualGroup"] = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryGlobalVirtualGroupFamilyRequest(betterproto.Message):
    family_id: int = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class QueryGlobalVirtualGroupFamilyResponse(betterproto.Message):
    global_virtual_group_family: "GlobalVirtualGroupFamily" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryGlobalVirtualGroupFamiliesRequest(betterproto.Message):
    """this line is used by starport scaffolding # 3"""

    pagination: "__cosmos_base_query_v1_beta1__.PageRequest" = betterproto.message_field(1)


@dataclass(eq=False, repr=False)
class QueryGlobalVirtualGroupFamiliesResponse(betterproto.Message):
    gvg_families: List["GlobalVirtualGroupFamily"] = betterproto.message_field(1)
    pagination: "__cosmos_base_query_v1_beta1__.PageResponse" = betterproto.message_field(2)


@dataclass(eq=False, repr=False)
class AvailableGlobalVirtualGroupFamiliesRequest(betterproto.Message):
    global_virtual_group_family_ids: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class AvailableGlobalVirtualGroupFamiliesResponse(betterproto.Message):
    global_virtual_group_family_ids: List[int] = betterproto.uint32_field(1)


@dataclass(eq=False, repr=False)
class MsgUpdateParams(betterproto.Message):
    """MsgUpdateParams is the Msg/UpdateParams request type."""

    authority: str = betterproto.string_field(1)
    """
    authority is the address that controls the module (defaults to x/gov unless
    overwritten).
    """

    params: "Params" = betterproto.message_field(2)
    """
    params defines the x/virtualgroup parameters to update.
    NOTE: All parameters must be supplied.
    """


@dataclass(eq=False, repr=False)
class MsgUpdateParamsResponse(betterproto.Message):
    """
    MsgUpdateParamsResponse defines the response structure for executing a
    MsgUpdateParams message.
    """

    pass


@dataclass(eq=False, repr=False)
class MsgCreateGlobalVirtualGroup(betterproto.Message):
    storage_provider: str = betterproto.string_field(1)
    """
    storage_provider defines the operator account address of the storage provider who
    create the global virtual group.
    """

    family_id: int = betterproto.uint32_field(2)
    """family_id is the identifier for the virtual group's family."""

    secondary_sp_ids: List[int] = betterproto.uint32_field(3)
    """
    secondary_sp_id is a list of secondary storage provider IDs associated with the
    virtual group.
    """

    deposit: "__cosmos_base_v1_beta1__.Coin" = betterproto.message_field(4)
    """
    total_deposit is the total deposit amount required for the virtual group.
    The tokens needs deposited and the size of storage are correlated.
    """


@dataclass(eq=False, repr=False)
class MsgCreateGlobalVirtualGroupResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgDeleteGlobalVirtualGroup(betterproto.Message):
    storage_provider: str = betterproto.string_field(1)
    """
    storage_provider defines the operator account address of the storage provider who
    delete the global virtual group.
    """

    global_virtual_group_id: int = betterproto.uint32_field(2)
    """global_virtual_group_id is the identifier of the global virtual group."""


@dataclass(eq=False, repr=False)
class MsgDeleteGlobalVirtualGroupResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgDeposit(betterproto.Message):
    storage_provider: str = betterproto.string_field(1)
    """
    storage_provider defines the operator/funding account address of the storage
    provider who deposit to the global virtual group.
    """

    global_virtual_group_id: int = betterproto.uint32_field(2)
    """global_virtual_group_id is the identifier of the global virtual group."""

    deposit: "__cosmos_base_v1_beta1__.Coin" = betterproto.message_field(3)
    """deposit is the amount of tokens being deposited for the global virtual group."""


@dataclass(eq=False, repr=False)
class MsgDepositResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgWithdraw(betterproto.Message):
    storage_provider: str = betterproto.string_field(1)
    """
    storage_provider defines the operator/funding account address of the storage
    provider who withdraw from the global virtual group.
    """

    global_virtual_group_id: int = betterproto.uint32_field(2)
    """global_virtual_group_id is the identifier of the global virtual group."""

    withdraw: "__cosmos_base_v1_beta1__.Coin" = betterproto.message_field(3)
    """
    withdraw is the amount of coins to be withdrawn.
    The amount needs to be smaller than stored_size * storage_staking_price
    """


@dataclass(eq=False, repr=False)
class MsgWithdrawResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgSwapOut(betterproto.Message):
    storage_provider: str = betterproto.string_field(1)
    """
    storage_provider defines the operator account address of the storage provider who
    want to swap out from the global virtual group.
    """

    global_virtual_group_family_id: int = betterproto.uint32_field(2)
    """
    virtual_group_family_id is the identifier of the virtual group family.
    if it set to non-zero, it represents that the operator swap out as the primary
    storage provider
    it it set to zero, it represents that the operator swap out as the secondary storage
    provider.
    """

    global_virtual_group_ids: List[int] = betterproto.uint32_field(3)
    """
    global_virtual_group_ids is a list of global virtual group IDs associated with the
    swap out.
    It allows to be empty only when the operator is the primary storage provider.
    """

    successor_sp_id: int = betterproto.uint32_field(4)
    """successor_sp_id is the unique id of the successor storage provider."""

    successor_sp_approval: "_common__.Approval" = betterproto.message_field(5)
    """
    approval includes an expiration time and a signature.
    The fields to be signed with contains the necessary information of the successor.
    """


@dataclass(eq=False, repr=False)
class MsgSwapOutResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgCompleteSwapOut(betterproto.Message):
    storage_provider: str = betterproto.string_field(1)
    """
    storage_provider defines the operator account address of the storage provider who
    complete swap out task.
    """

    global_virtual_group_family_id: int = betterproto.uint32_field(2)
    """
    virtual_group_family_id is the identifier of the virtual group family.
    if it set to non-zero, it represents that the operator swap out as the primary
    storage provider
    it it set to zero, it represents that the operator swap out as the secondary storage
    provider.
    """

    global_virtual_group_ids: List[int] = betterproto.uint32_field(3)
    """
    global_virtual_group_ids is a list of global virtual group IDs associated with the
    swap out.
    It allows to be empty only when the operator is the primary storage provider.
    """


@dataclass(eq=False, repr=False)
class MsgCompleteSwapOutResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgCancelSwapOut(betterproto.Message):
    storage_provider: str = betterproto.string_field(1)
    """
    storage_provider defines the operator account address of the storage provider who
    cancel the swap out task.
    """

    global_virtual_group_family_id: int = betterproto.uint32_field(2)
    """
    virtual_group_family_id is the identifier of the virtual group family.
    if it set to non-zero, it represents that the operator swap out as the primary
    storage provider
    it it set to zero, it represents that the operator swap out as the secondary storage
    provider.
    """

    global_virtual_group_ids: List[int] = betterproto.uint32_field(3)
    """
    global_virtual_group_ids is a list of global virtual group IDs associated with the
    swap out.
    It allows to be empty only when the operator is the primary storage provider.
    """


@dataclass(eq=False, repr=False)
class MsgCancelSwapOutResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgSettle(betterproto.Message):
    """
    MsgSettle define the message for settling storage income of GVG family or several
    GVGs.
    Firstly, the handler will do stream settlement for the payment account; and
    secondly, the income will be distributed to related storage providers.
    """

    storage_provider: str = betterproto.string_field(1)
    """
    storage_provider defines the operator/funding account address of the storage
    provider who initial settle request.
    """

    global_virtual_group_family_id: int = betterproto.uint32_field(2)
    """
    global_virtual_group_family_id is the identifier of the global virtual group family.
    """

    global_virtual_group_ids: List[int] = betterproto.uint32_field(3)
    """global_virtual_group_id is the identifier of the global virtual group."""


@dataclass(eq=False, repr=False)
class MsgSettleResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgStorageProviderExit(betterproto.Message):
    """this line is used by starport scaffolding # proto/tx/message"""

    storage_provider: str = betterproto.string_field(1)
    """
    storage_provider defines the operator account address of the storage provider who
    want to exit from the greenfield storage network.
    """


@dataclass(eq=False, repr=False)
class MsgStorageProviderExitResponse(betterproto.Message):
    pass


@dataclass(eq=False, repr=False)
class MsgCompleteStorageProviderExit(betterproto.Message):
    storage_provider: str = betterproto.string_field(1)
    """
    storage_provider defines the operator account address of the storage provider who
    want to exit from the greenfield storage network.
    """


@dataclass(eq=False, repr=False)
class MsgCompleteStorageProviderExitResponse(betterproto.Message):
    pass


class QueryStub(betterproto.ServiceStub):
    async def params(
        self,
        query_params_request: "QueryParamsRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryParamsResponse":
        return await self._unary_unary(
            "/greenfield.virtualgroup.Query/Params",
            query_params_request,
            QueryParamsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def global_virtual_group(
        self,
        query_global_virtual_group_request: "QueryGlobalVirtualGroupRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryGlobalVirtualGroupResponse":
        return await self._unary_unary(
            "/greenfield.virtualgroup.Query/GlobalVirtualGroup",
            query_global_virtual_group_request,
            QueryGlobalVirtualGroupResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def global_virtual_group_by_family_id(
        self,
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryGlobalVirtualGroupByFamilyIdResponse":
        return await self._unary_unary(
            "/greenfield.virtualgroup.Query/GlobalVirtualGroupByFamilyID",
            query_global_virtual_group_by_family_id_request,
            QueryGlobalVirtualGroupByFamilyIdResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def global_virtual_group_family(
        self,
        query_global_virtual_group_family_request: "QueryGlobalVirtualGroupFamilyRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryGlobalVirtualGroupFamilyResponse":
        return await self._unary_unary(
            "/greenfield.virtualgroup.Query/GlobalVirtualGroupFamily",
            query_global_virtual_group_family_request,
            QueryGlobalVirtualGroupFamilyResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def global_virtual_group_families(
        self,
        query_global_virtual_group_families_request: "QueryGlobalVirtualGroupFamiliesRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "QueryGlobalVirtualGroupFamiliesResponse":
        return await self._unary_unary(
            "/greenfield.virtualgroup.Query/GlobalVirtualGroupFamilies",
            query_global_virtual_group_families_request,
            QueryGlobalVirtualGroupFamiliesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def available_global_virtual_group_families(
        self,
        available_global_virtual_group_families_request: "AvailableGlobalVirtualGroupFamiliesRequest",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "AvailableGlobalVirtualGroupFamiliesResponse":
        return await self._unary_unary(
            "/greenfield.virtualgroup.Query/AvailableGlobalVirtualGroupFamilies",
            available_global_virtual_group_families_request,
            AvailableGlobalVirtualGroupFamiliesResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class MsgStub(betterproto.ServiceStub):
    async def create_global_virtual_group(
        self,
        msg_create_global_virtual_group: "MsgCreateGlobalVirtualGroup",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgCreateGlobalVirtualGroupResponse":
        return await self._unary_unary(
            "/greenfield.virtualgroup.Msg/CreateGlobalVirtualGroup",
            msg_create_global_virtual_group,
            MsgCreateGlobalVirtualGroupResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def delete_global_virtual_group(
        self,
        msg_delete_global_virtual_group: "MsgDeleteGlobalVirtualGroup",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgDeleteGlobalVirtualGroupResponse":
        return await self._unary_unary(
            "/greenfield.virtualgroup.Msg/DeleteGlobalVirtualGroup",
            msg_delete_global_virtual_group,
            MsgDeleteGlobalVirtualGroupResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def deposit(
        self,
        msg_deposit: "MsgDeposit",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgDepositResponse":
        return await self._unary_unary(
            "/greenfield.virtualgroup.Msg/Deposit",
            msg_deposit,
            MsgDepositResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def withdraw(
        self,
        msg_withdraw: "MsgWithdraw",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgWithdrawResponse":
        return await self._unary_unary(
            "/greenfield.virtualgroup.Msg/Withdraw",
            msg_withdraw,
            MsgWithdrawResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def swap_out(
        self,
        msg_swap_out: "MsgSwapOut",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgSwapOutResponse":
        return await self._unary_unary(
            "/greenfield.virtualgroup.Msg/SwapOut",
            msg_swap_out,
            MsgSwapOutResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def settle(
        self,
        msg_settle: "MsgSettle",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgSettleResponse":
        return await self._unary_unary(
            "/greenfield.virtualgroup.Msg/Settle",
            msg_settle,
            MsgSettleResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def update_params(
        self,
        msg_update_params: "MsgUpdateParams",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgUpdateParamsResponse":
        return await self._unary_unary(
            "/greenfield.virtualgroup.Msg/UpdateParams",
            msg_update_params,
            MsgUpdateParamsResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def storage_provider_exit(
        self,
        msg_storage_provider_exit: "MsgStorageProviderExit",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgStorageProviderExitResponse":
        return await self._unary_unary(
            "/greenfield.virtualgroup.Msg/StorageProviderExit",
            msg_storage_provider_exit,
            MsgStorageProviderExitResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def complete_storage_provider_exit(
        self,
        msg_complete_storage_provider_exit: "MsgCompleteStorageProviderExit",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgCompleteStorageProviderExitResponse":
        return await self._unary_unary(
            "/greenfield.virtualgroup.Msg/CompleteStorageProviderExit",
            msg_complete_storage_provider_exit,
            MsgCompleteStorageProviderExitResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def complete_swap_out(
        self,
        msg_complete_swap_out: "MsgCompleteSwapOut",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgCompleteSwapOutResponse":
        return await self._unary_unary(
            "/greenfield.virtualgroup.Msg/CompleteSwapOut",
            msg_complete_swap_out,
            MsgCompleteSwapOutResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )

    async def cancel_swap_out(
        self,
        msg_cancel_swap_out: "MsgCancelSwapOut",
        *,
        timeout: Optional[float] = None,
        deadline: Optional["Deadline"] = None,
        metadata: Optional["MetadataLike"] = None
    ) -> "MsgCancelSwapOutResponse":
        return await self._unary_unary(
            "/greenfield.virtualgroup.Msg/CancelSwapOut",
            msg_cancel_swap_out,
            MsgCancelSwapOutResponse,
            timeout=timeout,
            deadline=deadline,
            metadata=metadata,
        )


class QueryBase(ServiceBase):
    async def params(self, query_params_request: "QueryParamsRequest") -> "QueryParamsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def global_virtual_group(
        self, query_global_virtual_group_request: "QueryGlobalVirtualGroupRequest"
    ) -> "QueryGlobalVirtualGroupResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def global_virtual_group_by_family_id(
        self,
    ) -> "QueryGlobalVirtualGroupByFamilyIdResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def global_virtual_group_family(
        self,
        query_global_virtual_group_family_request: "QueryGlobalVirtualGroupFamilyRequest",
    ) -> "QueryGlobalVirtualGroupFamilyResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def global_virtual_group_families(
        self,
        query_global_virtual_group_families_request: "QueryGlobalVirtualGroupFamiliesRequest",
    ) -> "QueryGlobalVirtualGroupFamiliesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def available_global_virtual_group_families(
        self,
        available_global_virtual_group_families_request: "AvailableGlobalVirtualGroupFamiliesRequest",
    ) -> "AvailableGlobalVirtualGroupFamiliesResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_params(self, stream: "grpclib.server.Stream[QueryParamsRequest, QueryParamsResponse]") -> None:
        request = await stream.recv_message()
        response = await self.params(request)
        await stream.send_message(response)

    async def __rpc_global_virtual_group(
        self,
        stream: "grpclib.server.Stream[QueryGlobalVirtualGroupRequest, QueryGlobalVirtualGroupResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.global_virtual_group(request)
        await stream.send_message(response)

    async def __rpc_global_virtual_group_by_family_id(
        self,
        stream: "grpclib.server.Stream[QueryGlobalVirtualGroupByFamilyIdRequest, QueryGlobalVirtualGroupByFamilyIdResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.global_virtual_group_by_family_id(request)
        await stream.send_message(response)

    async def __rpc_global_virtual_group_family(
        self,
        stream: "grpclib.server.Stream[QueryGlobalVirtualGroupFamilyRequest, QueryGlobalVirtualGroupFamilyResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.global_virtual_group_family(request)
        await stream.send_message(response)

    async def __rpc_global_virtual_group_families(
        self,
        stream: "grpclib.server.Stream[QueryGlobalVirtualGroupFamiliesRequest, QueryGlobalVirtualGroupFamiliesResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.global_virtual_group_families(request)
        await stream.send_message(response)

    async def __rpc_available_global_virtual_group_families(
        self,
        stream: "grpclib.server.Stream[AvailableGlobalVirtualGroupFamiliesRequest, AvailableGlobalVirtualGroupFamiliesResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.available_global_virtual_group_families(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/greenfield.virtualgroup.Query/Params": grpclib.const.Handler(
                self.__rpc_params,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryParamsRequest,
                QueryParamsResponse,
            ),
            "/greenfield.virtualgroup.Query/GlobalVirtualGroup": grpclib.const.Handler(
                self.__rpc_global_virtual_group,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryGlobalVirtualGroupRequest,
                QueryGlobalVirtualGroupResponse,
            ),
            "/greenfield.virtualgroup.Query/GlobalVirtualGroupByFamilyID": grpclib.const.Handler(
                self.__rpc_global_virtual_group_by_family_id,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryGlobalVirtualGroupByFamilyIdRequest,
                QueryGlobalVirtualGroupByFamilyIdResponse,
            ),
            "/greenfield.virtualgroup.Query/GlobalVirtualGroupFamily": grpclib.const.Handler(
                self.__rpc_global_virtual_group_family,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryGlobalVirtualGroupFamilyRequest,
                QueryGlobalVirtualGroupFamilyResponse,
            ),
            "/greenfield.virtualgroup.Query/GlobalVirtualGroupFamilies": grpclib.const.Handler(
                self.__rpc_global_virtual_group_families,
                grpclib.const.Cardinality.UNARY_UNARY,
                QueryGlobalVirtualGroupFamiliesRequest,
                QueryGlobalVirtualGroupFamiliesResponse,
            ),
            "/greenfield.virtualgroup.Query/AvailableGlobalVirtualGroupFamilies": grpclib.const.Handler(
                self.__rpc_available_global_virtual_group_families,
                grpclib.const.Cardinality.UNARY_UNARY,
                AvailableGlobalVirtualGroupFamiliesRequest,
                AvailableGlobalVirtualGroupFamiliesResponse,
            ),
        }


class MsgBase(ServiceBase):
    async def create_global_virtual_group(
        self, msg_create_global_virtual_group: "MsgCreateGlobalVirtualGroup"
    ) -> "MsgCreateGlobalVirtualGroupResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def delete_global_virtual_group(
        self, msg_delete_global_virtual_group: "MsgDeleteGlobalVirtualGroup"
    ) -> "MsgDeleteGlobalVirtualGroupResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def deposit(self, msg_deposit: "MsgDeposit") -> "MsgDepositResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def withdraw(self, msg_withdraw: "MsgWithdraw") -> "MsgWithdrawResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def swap_out(self, msg_swap_out: "MsgSwapOut") -> "MsgSwapOutResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def settle(self, msg_settle: "MsgSettle") -> "MsgSettleResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def update_params(self, msg_update_params: "MsgUpdateParams") -> "MsgUpdateParamsResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def storage_provider_exit(
        self, msg_storage_provider_exit: "MsgStorageProviderExit"
    ) -> "MsgStorageProviderExitResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def complete_storage_provider_exit(
        self, msg_complete_storage_provider_exit: "MsgCompleteStorageProviderExit"
    ) -> "MsgCompleteStorageProviderExitResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def complete_swap_out(self, msg_complete_swap_out: "MsgCompleteSwapOut") -> "MsgCompleteSwapOutResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def cancel_swap_out(self, msg_cancel_swap_out: "MsgCancelSwapOut") -> "MsgCancelSwapOutResponse":
        raise grpclib.GRPCError(grpclib.const.Status.UNIMPLEMENTED)

    async def __rpc_create_global_virtual_group(
        self,
        stream: "grpclib.server.Stream[MsgCreateGlobalVirtualGroup, MsgCreateGlobalVirtualGroupResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.create_global_virtual_group(request)
        await stream.send_message(response)

    async def __rpc_delete_global_virtual_group(
        self,
        stream: "grpclib.server.Stream[MsgDeleteGlobalVirtualGroup, MsgDeleteGlobalVirtualGroupResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.delete_global_virtual_group(request)
        await stream.send_message(response)

    async def __rpc_deposit(self, stream: "grpclib.server.Stream[MsgDeposit, MsgDepositResponse]") -> None:
        request = await stream.recv_message()
        response = await self.deposit(request)
        await stream.send_message(response)

    async def __rpc_withdraw(self, stream: "grpclib.server.Stream[MsgWithdraw, MsgWithdrawResponse]") -> None:
        request = await stream.recv_message()
        response = await self.withdraw(request)
        await stream.send_message(response)

    async def __rpc_swap_out(self, stream: "grpclib.server.Stream[MsgSwapOut, MsgSwapOutResponse]") -> None:
        request = await stream.recv_message()
        response = await self.swap_out(request)
        await stream.send_message(response)

    async def __rpc_settle(self, stream: "grpclib.server.Stream[MsgSettle, MsgSettleResponse]") -> None:
        request = await stream.recv_message()
        response = await self.settle(request)
        await stream.send_message(response)

    async def __rpc_update_params(
        self, stream: "grpclib.server.Stream[MsgUpdateParams, MsgUpdateParamsResponse]"
    ) -> None:
        request = await stream.recv_message()
        response = await self.update_params(request)
        await stream.send_message(response)

    async def __rpc_storage_provider_exit(
        self,
        stream: "grpclib.server.Stream[MsgStorageProviderExit, MsgStorageProviderExitResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.storage_provider_exit(request)
        await stream.send_message(response)

    async def __rpc_complete_storage_provider_exit(
        self,
        stream: "grpclib.server.Stream[MsgCompleteStorageProviderExit, MsgCompleteStorageProviderExitResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.complete_storage_provider_exit(request)
        await stream.send_message(response)

    async def __rpc_complete_swap_out(
        self,
        stream: "grpclib.server.Stream[MsgCompleteSwapOut, MsgCompleteSwapOutResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.complete_swap_out(request)
        await stream.send_message(response)

    async def __rpc_cancel_swap_out(
        self,
        stream: "grpclib.server.Stream[MsgCancelSwapOut, MsgCancelSwapOutResponse]",
    ) -> None:
        request = await stream.recv_message()
        response = await self.cancel_swap_out(request)
        await stream.send_message(response)

    def __mapping__(self) -> Dict[str, grpclib.const.Handler]:
        return {
            "/greenfield.virtualgroup.Msg/CreateGlobalVirtualGroup": grpclib.const.Handler(
                self.__rpc_create_global_virtual_group,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgCreateGlobalVirtualGroup,
                MsgCreateGlobalVirtualGroupResponse,
            ),
            "/greenfield.virtualgroup.Msg/DeleteGlobalVirtualGroup": grpclib.const.Handler(
                self.__rpc_delete_global_virtual_group,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgDeleteGlobalVirtualGroup,
                MsgDeleteGlobalVirtualGroupResponse,
            ),
            "/greenfield.virtualgroup.Msg/Deposit": grpclib.const.Handler(
                self.__rpc_deposit,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgDeposit,
                MsgDepositResponse,
            ),
            "/greenfield.virtualgroup.Msg/Withdraw": grpclib.const.Handler(
                self.__rpc_withdraw,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgWithdraw,
                MsgWithdrawResponse,
            ),
            "/greenfield.virtualgroup.Msg/SwapOut": grpclib.const.Handler(
                self.__rpc_swap_out,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgSwapOut,
                MsgSwapOutResponse,
            ),
            "/greenfield.virtualgroup.Msg/Settle": grpclib.const.Handler(
                self.__rpc_settle,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgSettle,
                MsgSettleResponse,
            ),
            "/greenfield.virtualgroup.Msg/UpdateParams": grpclib.const.Handler(
                self.__rpc_update_params,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgUpdateParams,
                MsgUpdateParamsResponse,
            ),
            "/greenfield.virtualgroup.Msg/StorageProviderExit": grpclib.const.Handler(
                self.__rpc_storage_provider_exit,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgStorageProviderExit,
                MsgStorageProviderExitResponse,
            ),
            "/greenfield.virtualgroup.Msg/CompleteStorageProviderExit": grpclib.const.Handler(
                self.__rpc_complete_storage_provider_exit,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgCompleteStorageProviderExit,
                MsgCompleteStorageProviderExitResponse,
            ),
            "/greenfield.virtualgroup.Msg/CompleteSwapOut": grpclib.const.Handler(
                self.__rpc_complete_swap_out,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgCompleteSwapOut,
                MsgCompleteSwapOutResponse,
            ),
            "/greenfield.virtualgroup.Msg/CancelSwapOut": grpclib.const.Handler(
                self.__rpc_cancel_swap_out,
                grpclib.const.Cardinality.UNARY_UNARY,
                MsgCancelSwapOut,
                MsgCancelSwapOutResponse,
            ),
        }
